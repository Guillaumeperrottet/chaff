#!/bin/bash

# Script de v√©rification finale pour le syst√®me de limites des mandats
# V√©rifie que tous les fichiers sont correctement configur√©s

echo "üîç V√©rification finale du syst√®me de limites des mandats..."
echo ""

# 1. V√©rifier les erreurs TypeScript
echo "üìù V√©rification des erreurs TypeScript..."
cd /Users/guili/code/Guillaumeperrottet/chaff

# Fichiers critiques √† v√©rifier
FILES_TO_CHECK=(
    "src/app/api/mandats/route.ts"
    "src/app/api/import/route.ts"
    "src/app/api/import/preview/route.ts"
    "src/app/api/import/chunked/route.ts"
    "src/app/api/user/organization-recovery/route.ts"
    "src/lib/subscription-limits.ts"
    "src/app/dashboard/mandates/create/page.tsx"
    "src/app/components/LimitAlert.tsx"
)

ERROR_COUNT=0

for FILE in "${FILES_TO_CHECK[@]}"; do
    if [ -f "$FILE" ]; then
        echo "  ‚úÖ $FILE existe"
    else
        echo "  ‚ùå $FILE manquant"
        ERROR_COUNT=$((ERROR_COUNT + 1))
    fi
done

echo ""

# 2. V√©rifier la pr√©sence des mots-cl√©s importants
echo "üîë V√©rification des mots-cl√©s critiques..."

# V√©rifier que organizationId est pr√©sent dans les routes d'import
if grep -q "organizationId" src/app/api/import/route.ts; then
    echo "  ‚úÖ organizationId pr√©sent dans import/route.ts"
else
    echo "  ‚ùå organizationId manquant dans import/route.ts"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# V√©rifier que maxMandates est configur√©
if grep -q "maxMandates" src/app/api/user/organization-recovery/route.ts; then
    echo "  ‚úÖ maxMandates configur√© dans organization-recovery"
else
    echo "  ‚ùå maxMandates manquant dans organization-recovery"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

# V√©rifier que canCreateMandate existe
if grep -q "canCreateMandate" src/lib/subscription-limits.ts; then
    echo "  ‚úÖ canCreateMandate existe dans subscription-limits"
else
    echo "  ‚ùå canCreateMandate manquant dans subscription-limits"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

echo ""

# 3. V√©rifier les fichiers de documentation
echo "üìö V√©rification de la documentation..."

if [ -f "MANDATE_LIMITS_SUMMARY.md" ]; then
    echo "  ‚úÖ MANDATE_LIMITS_SUMMARY.md existe"
else
    echo "  ‚ùå MANDATE_LIMITS_SUMMARY.md manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if [ -f "CORRECTIONS_SUMMARY.md" ]; then
    echo "  ‚úÖ CORRECTIONS_SUMMARY.md existe"
else
    echo "  ‚ùå CORRECTIONS_SUMMARY.md manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

if [ -f "reset-database-complete.sql" ]; then
    echo "  ‚úÖ reset-database-complete.sql existe"
else
    echo "  ‚ùå reset-database-complete.sql manquant"
    ERROR_COUNT=$((ERROR_COUNT + 1))
fi

echo ""

# 4. R√©sultat final
if [ $ERROR_COUNT -eq 0 ]; then
    echo "üéâ Toutes les v√©rifications sont PASS√âES !"
    echo "‚úÖ Le syst√®me de limites des mandats est pr√™t pour la production"
    echo ""
    echo "üöÄ Prochaines √©tapes :"
    echo "  1. Nettoyer la base avec: reset-database-complete.sql"
    echo "  2. D√©marrer le serveur: npm run dev"
    echo "  3. Tester la cr√©ation de mandats"
    echo "  4. V√©rifier les limites avec un plan FREE"
else
    echo "‚ùå $ERROR_COUNT erreur(s) d√©tect√©e(s)"
    echo "‚ö†Ô∏è  Veuillez corriger les probl√®mes avant de continuer"
    exit 1
fi
